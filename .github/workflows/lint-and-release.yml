name: Lint and Release Userscript

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  lint:
    if: github.event_name == 'pull_request'
    name: Lint userscript files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Prettier formatting check
        run: |
          npx --yes prettier@3.3.3 --check \
            "MxM-Formatter.user.js" \
            "MxM-Formatter.meta.js" \
            "index.html" \
            "test.js" \
            "mxm-formatter-extension/**/*.js"

  release:
    if: github.event_name == 'push'
    name: Tag and release userscript
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from userscript
        id: version
        run: |
          version_line=$(grep -m1 "^// @version" MxM-Formatter.user.js)
          if [ -z "$version_line" ]; then
            echo "::error::Unable to find @version in MxM-Formatter.user.js"
            exit 1
          fi
          version=$(echo "$version_line" | awk '{print $3}')
          if [ -z "$version" ]; then
            echo "::error::Unable to parse @version value"
            exit 1
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "tag=v$version" >> "$GITHUB_OUTPUT"

      - name: Validate version consistency
        run: |
          userscript_version="${{ steps.version.outputs.version }}"
          meta_version=$(grep -m1 "^// @version" MxM-Formatter.meta.js | awk '{print $3}')
          if [ "$meta_version" != "$userscript_version" ]; then
            echo "::error::Meta version ($meta_version) does not match userscript version ($userscript_version)"
            exit 1
          fi
          script_constant=$(grep -m1 "const SCRIPT_VERSION" MxM-Formatter.user.js | sed -E "s/.*'([^']+)'.*/\1/")
          if [ "$script_constant" != "$userscript_version" ]; then
            echo "::error::SCRIPT_VERSION constant ($script_constant) does not match userscript version ($userscript_version)"
            exit 1
          fi

      - name: Ensure tag is unique for this commit
        id: tag_check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ steps.version.outputs.tag }}';
            try {
              const ref = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag}`,
              });
              const existingSha = ref.data.object.sha;
              if (existingSha !== context.sha) {
                core.setFailed(`Tag ${tag} already exists on commit ${existingSha}. Please bump @version before merging.`);
              } else {
                core.info(`Tag ${tag} already exists on the current commit; continuing to refresh release assets.`);
                core.setOutput('tag_exists', 'true');
              }
            } catch (error) {
              if (error.status === 404) {
                core.info(`Tag ${tag} does not exist yet.`);
                core.setOutput('tag_exists', 'false');
              } else {
                throw error;
              }
            }

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.tag }}
          target_commitish: ${{ github.sha }}
          generate_release_notes: true
          files: |
            MxM-Formatter.user.js
            MxM-Formatter.meta.js
          fail_on_unmatched_files: true
          overwrite: true
=======
    branches: [ main ]
  push:
    tags:
      - 'v*'

jobs:
  lint:
    name: Lint userscript files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install ESLint
        run: npm install eslint --global

      - name: Run ESLint
        run: eslint MxM-Formatter.user.js || true

  release:
    name: Tag and release userscript
    needs: lint
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Upload UserScript to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: MxM-Formatter.user.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
